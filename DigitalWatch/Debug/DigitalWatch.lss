
DigitalWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000918  000009ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006a  0080006a  000009b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c3b  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b66  00000000  00000000  000027d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001342  00000000  00000000  0000333d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00004680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001321  00000000  00000000  00004f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006265  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f6 01 	call	0x3ec	; 0x3ec <main>
  8a:	0c 94 8a 04 	jmp	0x914	; 0x914 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <eeprom_write>:
* Purpose      : Write data on specific address on EEPROM
* Parameters   : Address and data
* Return value : void
*****************************************************************************/
void eeprom_write(uint8_t add, uint16_t data) {
	while(READBIT(EECR,EEWE) != 0);
  92:	e1 99       	sbic	0x1c, 1	; 28
  94:	fe cf       	rjmp	.-4      	; 0x92 <eeprom_write>
	EEAR = add;
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	9f bb       	out	0x1f, r25	; 31
  9a:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
  9c:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR,EEMWE);
  9e:	e2 9a       	sbi	0x1c, 2	; 28
	SETBIT(EECR,EEWE);
  a0:	e1 9a       	sbi	0x1c, 1	; 28
  a2:	08 95       	ret

000000a4 <eeprom_read>:
* Purpose      : Read data from specific address on EEPROM
* Parameters   : Address
* Return value : Short data
*****************************************************************************/
uint16_t eeprom_read(uint8_t add) {
	while(READBIT(EECR,EEWE) != 0);
  a4:	e1 99       	sbic	0x1c, 1	; 28
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <eeprom_read>
	EEAR = add;
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	9f bb       	out	0x1f, r25	; 31
  ac:	8e bb       	out	0x1e, r24	; 30
	SETBIT(EECR,EERE);
  ae:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
  b0:	8d b3       	in	r24, 0x1d	; 29
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret

000000b6 <KEYPAD_init>:
* Purpose      : Initializing Keypad
* Parameters   : void
* Return value : void
*****************************************************************************/
void KEYPAD_init(void) {
	INIT_KEYPAD_PINS();
  b6:	80 ef       	ldi	r24, 0xF0	; 240
  b8:	84 bb       	out	0x14, r24	; 20
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	85 bb       	out	0x15, r24	; 21
  be:	08 95       	ret

000000c0 <KEYPAD_read>:
* Purpose      : Read value from keypad
* Parameters   : void
* Return value : Character
*****************************************************************************/
int8_t KEYPAD_read(void) {
	K4(0);K5(1);K6(1);K7(1);
  c0:	ac 98       	cbi	0x15, 4	; 21
  c2:	ad 9a       	sbi	0x15, 5	; 21
  c4:	ae 9a       	sbi	0x15, 6	; 21
  c6:	af 9a       	sbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[0];
  c8:	98 9b       	sbis	0x13, 0	; 19
  ca:	44 c0       	rjmp	.+136    	; 0x154 <KEYPAD_read+0x94>
	if(K1() == 0) return KEYPAD_matrix[1];
  cc:	99 9b       	sbis	0x13, 1	; 19
  ce:	44 c0       	rjmp	.+136    	; 0x158 <KEYPAD_read+0x98>
	if(K2() == 0) return KEYPAD_matrix[2];
  d0:	9a 9b       	sbis	0x13, 2	; 19
  d2:	44 c0       	rjmp	.+136    	; 0x15c <KEYPAD_read+0x9c>
	if(K3() == 0) return KEYPAD_matrix[3];
  d4:	9b 9b       	sbis	0x13, 3	; 19
  d6:	44 c0       	rjmp	.+136    	; 0x160 <KEYPAD_read+0xa0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e1       	ldi	r24, 0x1F	; 31
  da:	9e e4       	ldi	r25, 0x4E	; 78
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <KEYPAD_read+0x1c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <KEYPAD_read+0x22>
  e2:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(0);K6(1);K7(1);
  e4:	ac 9a       	sbi	0x15, 4	; 21
  e6:	ad 98       	cbi	0x15, 5	; 21
  e8:	ae 9a       	sbi	0x15, 6	; 21
  ea:	af 9a       	sbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[4];
  ec:	98 9b       	sbis	0x13, 0	; 19
  ee:	3a c0       	rjmp	.+116    	; 0x164 <KEYPAD_read+0xa4>
	if(K1() == 0) return KEYPAD_matrix[5];
  f0:	99 9b       	sbis	0x13, 1	; 19
  f2:	3a c0       	rjmp	.+116    	; 0x168 <KEYPAD_read+0xa8>
	if(K2() == 0) return KEYPAD_matrix[6];
  f4:	9a 9b       	sbis	0x13, 2	; 19
  f6:	3a c0       	rjmp	.+116    	; 0x16c <KEYPAD_read+0xac>
	if(K3() == 0) return KEYPAD_matrix[7];
  f8:	9b 9b       	sbis	0x13, 3	; 19
  fa:	3a c0       	rjmp	.+116    	; 0x170 <KEYPAD_read+0xb0>
  fc:	8f e1       	ldi	r24, 0x1F	; 31
  fe:	9e e4       	ldi	r25, 0x4E	; 78
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <KEYPAD_read+0x40>
 104:	00 c0       	rjmp	.+0      	; 0x106 <KEYPAD_read+0x46>
 106:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(1);K6(0);K7(1);
 108:	ac 9a       	sbi	0x15, 4	; 21
 10a:	ad 9a       	sbi	0x15, 5	; 21
 10c:	ae 98       	cbi	0x15, 6	; 21
 10e:	af 9a       	sbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[8];
 110:	98 9b       	sbis	0x13, 0	; 19
 112:	30 c0       	rjmp	.+96     	; 0x174 <KEYPAD_read+0xb4>
	if(K1() == 0) return KEYPAD_matrix[9];
 114:	99 9b       	sbis	0x13, 1	; 19
 116:	30 c0       	rjmp	.+96     	; 0x178 <KEYPAD_read+0xb8>
	if(K2() == 0) return KEYPAD_matrix[10];
 118:	9a 9b       	sbis	0x13, 2	; 19
 11a:	30 c0       	rjmp	.+96     	; 0x17c <KEYPAD_read+0xbc>
	if(K3() == 0) return KEYPAD_matrix[11];
 11c:	9b 9b       	sbis	0x13, 3	; 19
 11e:	30 c0       	rjmp	.+96     	; 0x180 <KEYPAD_read+0xc0>
 120:	8f e1       	ldi	r24, 0x1F	; 31
 122:	9e e4       	ldi	r25, 0x4E	; 78
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <KEYPAD_read+0x64>
 128:	00 c0       	rjmp	.+0      	; 0x12a <KEYPAD_read+0x6a>
 12a:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(1);K6(1);K7(0);
 12c:	ac 9a       	sbi	0x15, 4	; 21
 12e:	ad 9a       	sbi	0x15, 5	; 21
 130:	ae 9a       	sbi	0x15, 6	; 21
 132:	af 98       	cbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[12];
 134:	98 9b       	sbis	0x13, 0	; 19
 136:	26 c0       	rjmp	.+76     	; 0x184 <KEYPAD_read+0xc4>
	if(K1() == 0) return KEYPAD_matrix[13];
 138:	99 9b       	sbis	0x13, 1	; 19
 13a:	26 c0       	rjmp	.+76     	; 0x188 <KEYPAD_read+0xc8>
	if(K2() == 0) return KEYPAD_matrix[14];
 13c:	9a 9b       	sbis	0x13, 2	; 19
 13e:	26 c0       	rjmp	.+76     	; 0x18c <KEYPAD_read+0xcc>
	if(K3() == 0) return KEYPAD_matrix[15];
 140:	9b 9b       	sbis	0x13, 3	; 19
 142:	26 c0       	rjmp	.+76     	; 0x190 <KEYPAD_read+0xd0>
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	9e e4       	ldi	r25, 0x4E	; 78
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <KEYPAD_read+0x88>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <KEYPAD_read+0x8e>
 14e:	00 00       	nop
	_delay_ms(5);
	
	
	
	return -1;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	08 95       	ret
* Parameters   : void
* Return value : Character
*****************************************************************************/
int8_t KEYPAD_read(void) {
	K4(0);K5(1);K6(1);K7(1);
	if(K0() == 0) return KEYPAD_matrix[0];
 154:	87 e3       	ldi	r24, 0x37	; 55
 156:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[1];
 158:	88 e3       	ldi	r24, 0x38	; 56
 15a:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[2];
 15c:	89 e3       	ldi	r24, 0x39	; 57
 15e:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[3];
 160:	8f e2       	ldi	r24, 0x2F	; 47
 162:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(0);K6(1);K7(1);
	if(K0() == 0) return KEYPAD_matrix[4];
 164:	84 e3       	ldi	r24, 0x34	; 52
 166:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[5];
 168:	85 e3       	ldi	r24, 0x35	; 53
 16a:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[6];
 16c:	86 e3       	ldi	r24, 0x36	; 54
 16e:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[7];
 170:	8a e2       	ldi	r24, 0x2A	; 42
 172:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(1);K6(0);K7(1);
	if(K0() == 0) return KEYPAD_matrix[8];
 174:	81 e3       	ldi	r24, 0x31	; 49
 176:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[9];
 178:	82 e3       	ldi	r24, 0x32	; 50
 17a:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[10];
 17c:	83 e3       	ldi	r24, 0x33	; 51
 17e:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[11];
 180:	8d e2       	ldi	r24, 0x2D	; 45
 182:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(1);K6(1);K7(0);
	if(K0() == 0) return KEYPAD_matrix[12];
 184:	83 e6       	ldi	r24, 0x63	; 99
 186:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[13];
 188:	80 e3       	ldi	r24, 0x30	; 48
 18a:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[14];
 18c:	8d e3       	ldi	r24, 0x3D	; 61
 18e:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[15];
 190:	8b e2       	ldi	r24, 0x2B	; 43
	_delay_ms(5);
	
	
	
	return -1;
}
 192:	08 95       	ret

00000194 <KEYPAD_get_key>:
* Function Name: KEYPAD_get_key
* Purpose      : Read value from keypad and return it
* Parameters   : void
* Return value : Character
*****************************************************************************/
uint8_t KEYPAD_get_key(void) {
 194:	cf 93       	push	r28
	uint8_t KEY;
	
	while(KEYPAD_read() == -1) {}
 196:	0e 94 60 00 	call	0xc0	; 0xc0 <KEYPAD_read>
 19a:	8f 3f       	cpi	r24, 0xFF	; 255
 19c:	e1 f3       	breq	.-8      	; 0x196 <KEYPAD_get_key+0x2>
	KEY = KEYPAD_read();
 19e:	0e 94 60 00 	call	0xc0	; 0xc0 <KEYPAD_read>
 1a2:	c8 2f       	mov	r28, r24
	while(KEYPAD_read() != -1) {}
 1a4:	0e 94 60 00 	call	0xc0	; 0xc0 <KEYPAD_read>
 1a8:	8f 3f       	cpi	r24, 0xFF	; 255
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <KEYPAD_get_key+0x10>
	
	return KEY;
}
 1ac:	8c 2f       	mov	r24, r28
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <LCD_write_command>:

	for(i = 0; (data[i] != '\0'); i++) {
		LCD_write_char(data[i]);
	}
	
}
 1b2:	da 98       	cbi	0x1b, 2	; 27
 1b4:	88 23       	and	r24, r24
 1b6:	14 f4       	brge	.+4      	; 0x1bc <LCD_write_command+0xa>
 1b8:	df 9a       	sbi	0x1b, 7	; 27
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <LCD_write_command+0xc>
 1bc:	df 98       	cbi	0x1b, 7	; 27
 1be:	86 ff       	sbrs	r24, 6
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <LCD_write_command+0x14>
 1c2:	de 9a       	sbi	0x1b, 6	; 27
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <LCD_write_command+0x16>
 1c6:	de 98       	cbi	0x1b, 6	; 27
 1c8:	85 ff       	sbrs	r24, 5
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <LCD_write_command+0x1e>
 1cc:	dd 9a       	sbi	0x1b, 5	; 27
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <LCD_write_command+0x20>
 1d0:	dd 98       	cbi	0x1b, 5	; 27
 1d2:	84 ff       	sbrs	r24, 4
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <LCD_write_command+0x28>
 1d6:	dc 9a       	sbi	0x1b, 4	; 27
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <LCD_write_command+0x2a>
 1da:	dc 98       	cbi	0x1b, 4	; 27
 1dc:	db 9a       	sbi	0x1b, 3	; 27
 1de:	ef e9       	ldi	r30, 0x9F	; 159
 1e0:	ff e0       	ldi	r31, 0x0F	; 15
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_write_command+0x30>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_write_command+0x36>
 1e8:	00 00       	nop
 1ea:	db 98       	cbi	0x1b, 3	; 27
 1ec:	ef e9       	ldi	r30, 0x9F	; 159
 1ee:	ff e0       	ldi	r31, 0x0F	; 15
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_write_command+0x3e>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_write_command+0x44>
 1f6:	00 00       	nop
 1f8:	83 ff       	sbrs	r24, 3
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <LCD_write_command+0x4e>
 1fc:	df 9a       	sbi	0x1b, 7	; 27
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <LCD_write_command+0x50>
 200:	df 98       	cbi	0x1b, 7	; 27
 202:	82 ff       	sbrs	r24, 2
 204:	02 c0       	rjmp	.+4      	; 0x20a <LCD_write_command+0x58>
 206:	de 9a       	sbi	0x1b, 6	; 27
 208:	01 c0       	rjmp	.+2      	; 0x20c <LCD_write_command+0x5a>
 20a:	de 98       	cbi	0x1b, 6	; 27
 20c:	81 ff       	sbrs	r24, 1
 20e:	02 c0       	rjmp	.+4      	; 0x214 <LCD_write_command+0x62>
 210:	dd 9a       	sbi	0x1b, 5	; 27
 212:	01 c0       	rjmp	.+2      	; 0x216 <LCD_write_command+0x64>
 214:	dd 98       	cbi	0x1b, 5	; 27
 216:	80 ff       	sbrs	r24, 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <LCD_write_command+0x6c>
 21a:	dc 9a       	sbi	0x1b, 4	; 27
 21c:	01 c0       	rjmp	.+2      	; 0x220 <LCD_write_command+0x6e>
 21e:	dc 98       	cbi	0x1b, 4	; 27
 220:	db 9a       	sbi	0x1b, 3	; 27
 222:	8f e9       	ldi	r24, 0x9F	; 159
 224:	9f e0       	ldi	r25, 0x0F	; 15
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_write_command+0x74>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_write_command+0x7a>
 22c:	00 00       	nop
 22e:	db 98       	cbi	0x1b, 3	; 27
 230:	ef e9       	ldi	r30, 0x9F	; 159
 232:	ff e0       	ldi	r31, 0x0F	; 15
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_write_command+0x82>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_write_command+0x88>
 23a:	00 00       	nop
 23c:	08 95       	ret

0000023e <LCD_init>:
 23e:	8a b3       	in	r24, 0x1a	; 26
 240:	8d 6f       	ori	r24, 0xFD	; 253
 242:	8a bb       	out	0x1a, r24	; 26
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 24a:	8f e7       	ldi	r24, 0x7F	; 127
 24c:	9e e3       	ldi	r25, 0x3E	; 62
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_init+0x10>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_init+0x16>
 254:	00 00       	nop
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 25c:	8f e7       	ldi	r24, 0x7F	; 127
 25e:	9e e3       	ldi	r25, 0x3E	; 62
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_init+0x22>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_init+0x28>
 266:	00 00       	nop
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 26e:	8f e7       	ldi	r24, 0x7F	; 127
 270:	9e e3       	ldi	r25, 0x3E	; 62
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_init+0x34>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_init+0x3a>
 278:	00 00       	nop
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 292:	8c e0       	ldi	r24, 0x0C	; 12
 294:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 298:	9f ef       	ldi	r25, 0xFF	; 255
 29a:	29 ef       	ldi	r18, 0xF9	; 249
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	91 50       	subi	r25, 0x01	; 1
 2a0:	20 40       	sbci	r18, 0x00	; 0
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <LCD_init+0x60>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_init+0x6a>
 2a8:	00 00       	nop
 2aa:	08 95       	ret

000002ac <LCD_write_char>:
 2ac:	da 9a       	sbi	0x1b, 2	; 27
 2ae:	88 23       	and	r24, r24
 2b0:	14 f4       	brge	.+4      	; 0x2b6 <LCD_write_char+0xa>
 2b2:	df 9a       	sbi	0x1b, 7	; 27
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <LCD_write_char+0xc>
 2b6:	df 98       	cbi	0x1b, 7	; 27
 2b8:	86 ff       	sbrs	r24, 6
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <LCD_write_char+0x14>
 2bc:	de 9a       	sbi	0x1b, 6	; 27
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <LCD_write_char+0x16>
 2c0:	de 98       	cbi	0x1b, 6	; 27
 2c2:	85 ff       	sbrs	r24, 5
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <LCD_write_char+0x1e>
 2c6:	dd 9a       	sbi	0x1b, 5	; 27
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <LCD_write_char+0x20>
 2ca:	dd 98       	cbi	0x1b, 5	; 27
 2cc:	84 ff       	sbrs	r24, 4
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <LCD_write_char+0x28>
 2d0:	dc 9a       	sbi	0x1b, 4	; 27
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <LCD_write_char+0x2a>
 2d4:	dc 98       	cbi	0x1b, 4	; 27
 2d6:	db 9a       	sbi	0x1b, 3	; 27
 2d8:	ef e9       	ldi	r30, 0x9F	; 159
 2da:	ff e0       	ldi	r31, 0x0F	; 15
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_write_char+0x30>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_write_char+0x36>
 2e2:	00 00       	nop
 2e4:	db 98       	cbi	0x1b, 3	; 27
 2e6:	ef e9       	ldi	r30, 0x9F	; 159
 2e8:	ff e0       	ldi	r31, 0x0F	; 15
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_write_char+0x3e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_write_char+0x44>
 2f0:	00 00       	nop
 2f2:	83 ff       	sbrs	r24, 3
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <LCD_write_char+0x4e>
 2f6:	df 9a       	sbi	0x1b, 7	; 27
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <LCD_write_char+0x50>
 2fa:	df 98       	cbi	0x1b, 7	; 27
 2fc:	82 ff       	sbrs	r24, 2
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <LCD_write_char+0x58>
 300:	de 9a       	sbi	0x1b, 6	; 27
 302:	01 c0       	rjmp	.+2      	; 0x306 <LCD_write_char+0x5a>
 304:	de 98       	cbi	0x1b, 6	; 27
 306:	81 ff       	sbrs	r24, 1
 308:	02 c0       	rjmp	.+4      	; 0x30e <LCD_write_char+0x62>
 30a:	dd 9a       	sbi	0x1b, 5	; 27
 30c:	01 c0       	rjmp	.+2      	; 0x310 <LCD_write_char+0x64>
 30e:	dd 98       	cbi	0x1b, 5	; 27
 310:	80 ff       	sbrs	r24, 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <LCD_write_char+0x6c>
 314:	dc 9a       	sbi	0x1b, 4	; 27
 316:	01 c0       	rjmp	.+2      	; 0x31a <LCD_write_char+0x6e>
 318:	dc 98       	cbi	0x1b, 4	; 27
 31a:	db 9a       	sbi	0x1b, 3	; 27
 31c:	8f e9       	ldi	r24, 0x9F	; 159
 31e:	9f e0       	ldi	r25, 0x0F	; 15
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_write_char+0x74>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_write_char+0x7a>
 326:	00 00       	nop
 328:	db 98       	cbi	0x1b, 3	; 27
 32a:	ef e9       	ldi	r30, 0x9F	; 159
 32c:	ff e0       	ldi	r31, 0x0F	; 15
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_write_char+0x82>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_write_char+0x88>
 334:	00 00       	nop
 336:	08 95       	ret

00000338 <LCD_write_number>:
* Function Name: LCD_write_number
* Purpose      : Write number to LCD
* Parameters   : number
* Return value : void
*****************************************************************************/
void LCD_write_number(uint32_t data) {
 338:	8f 92       	push	r8
 33a:	9f 92       	push	r9
 33c:	af 92       	push	r10
 33e:	bf 92       	push	r11
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	2a 97       	sbiw	r28, 0x0a	; 10
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
	
	int8_t flag = 0, i;
	uint8_t str[10];
	
	for(i = 0; data >= 1 ; i++) {
 35a:	61 15       	cp	r22, r1
 35c:	71 05       	cpc	r23, r1
 35e:	81 05       	cpc	r24, r1
 360:	91 05       	cpc	r25, r1
 362:	a1 f1       	breq	.+104    	; 0x3cc <LCD_write_number+0x94>
 364:	10 e0       	ldi	r17, 0x00	; 0
		str[i] = data%10;
 366:	0f 2e       	mov	r0, r31
 368:	fa e0       	ldi	r31, 0x0A	; 10
 36a:	8f 2e       	mov	r8, r31
 36c:	91 2c       	mov	r9, r1
 36e:	a1 2c       	mov	r10, r1
 370:	b1 2c       	mov	r11, r1
 372:	f0 2d       	mov	r31, r0
 374:	01 c0       	rjmp	.+2      	; 0x378 <LCD_write_number+0x40>
void LCD_write_number(uint32_t data) {
	
	int8_t flag = 0, i;
	uint8_t str[10];
	
	for(i = 0; data >= 1 ; i++) {
 376:	12 2f       	mov	r17, r18
		str[i] = data%10;
 378:	ee 24       	eor	r14, r14
 37a:	e3 94       	inc	r14
 37c:	f1 2c       	mov	r15, r1
 37e:	ec 0e       	add	r14, r28
 380:	fd 1e       	adc	r15, r29
 382:	e1 0e       	add	r14, r17
 384:	f1 1c       	adc	r15, r1
 386:	17 fd       	sbrc	r17, 7
 388:	fa 94       	dec	r15
 38a:	a5 01       	movw	r20, r10
 38c:	94 01       	movw	r18, r8
 38e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__udivmodsi4>
 392:	f7 01       	movw	r30, r14
 394:	60 83       	st	Z, r22
		data = data/10;
 396:	62 2f       	mov	r22, r18
 398:	73 2f       	mov	r23, r19
 39a:	84 2f       	mov	r24, r20
 39c:	95 2f       	mov	r25, r21
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	21 0f       	add	r18, r17
void LCD_write_number(uint32_t data) {
	
	int8_t flag = 0, i;
	uint8_t str[10];
	
	for(i = 0; data >= 1 ; i++) {
 3a2:	61 15       	cp	r22, r1
 3a4:	71 05       	cpc	r23, r1
 3a6:	81 05       	cpc	r24, r1
 3a8:	91 05       	cpc	r25, r1
 3aa:	29 f7       	brne	.-54     	; 0x376 <LCD_write_number+0x3e>
		data = data/10;
	}
	
	flag = i-1;
	
	for(i = flag; i >= 0; i--) {
 3ac:	11 23       	and	r17, r17
 3ae:	74 f0       	brlt	.+28     	; 0x3cc <LCD_write_number+0x94>
		LCD_write_char(str[i]+48);
 3b0:	e1 e0       	ldi	r30, 0x01	; 1
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	ec 0f       	add	r30, r28
 3b6:	fd 1f       	adc	r31, r29
 3b8:	e1 0f       	add	r30, r17
 3ba:	f1 1d       	adc	r31, r1
 3bc:	17 fd       	sbrc	r17, 7
 3be:	fa 95       	dec	r31
 3c0:	80 81       	ld	r24, Z
 3c2:	80 5d       	subi	r24, 0xD0	; 208
 3c4:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_char>
 3c8:	11 50       	subi	r17, 0x01	; 1
		data = data/10;
	}
	
	flag = i-1;
	
	for(i = flag; i >= 0; i--) {
 3ca:	92 f7       	brpl	.-28     	; 0x3b0 <LCD_write_number+0x78>
		LCD_write_char(str[i]+48);
	}
	
}
 3cc:	2a 96       	adiw	r28, 0x0a	; 10
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	f8 94       	cli
 3d2:	de bf       	out	0x3e, r29	; 62
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	cd bf       	out	0x3d, r28	; 61
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	bf 90       	pop	r11
 3e4:	af 90       	pop	r10
 3e6:	9f 90       	pop	r9
 3e8:	8f 90       	pop	r8
 3ea:	08 95       	ret

000003ec <main>:
uint8_t set_flag;

int main(void)
{
	
	SETBIT(GICR,INT2);    // Interrupt to INT0 Pin
 3ec:	8b b7       	in	r24, 0x3b	; 59
 3ee:	80 62       	ori	r24, 0x20	; 32
 3f0:	8b bf       	out	0x3b, r24	; 59
	SETBIT(MCUCSR,ISC01); // Interrupt at falling edge
 3f2:	84 b7       	in	r24, 0x34	; 52
 3f4:	82 60       	ori	r24, 0x02	; 2
 3f6:	84 bf       	out	0x34, r24	; 52
	
	LCD_init();
 3f8:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_init>
	KEYPAD_init();
 3fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <KEYPAD_init>
	seven_seg_init();
 400:	0e 94 2b 03 	call	0x656	; 0x656 <seven_seg_init>
	timer0_CTC_init(250);
 404:	8a ef       	ldi	r24, 0xFA	; 250
 406:	0e 94 5d 04 	call	0x8ba	; 0x8ba <timer0_CTC_init>
	eeprom_write(SECS_ADD,0);
	eeprom_write(MINS_ADD,0);
	eeprom_write(HOURS_ADD,0);
	#endif
	
	SETBIT(PORTB,2); // set pin 0 port b as pulled up input
 40a:	c2 9a       	sbi	0x18, 2	; 24
	uint8_t KEY1, KEY2;

    while (1)
    {
		LCD_write_command(0x80);
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
		LCD_write_number(eeprom_read(HOURS_ADD));
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 418:	bc 01       	movw	r22, r24
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_write_number>
		LCD_write_char(':');
 422:	8a e3       	ldi	r24, 0x3A	; 58
 424:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_char>
		LCD_write_number(eeprom_read(MINS_ADD));
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 42e:	bc 01       	movw	r22, r24
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_write_number>
		LCD_write_char(':');
 438:	8a e3       	ldi	r24, 0x3A	; 58
 43a:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_char>
		LCD_write_number(eeprom_read(SECS_ADD));
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 444:	bc 01       	movw	r22, r24
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_write_number>
		LCD_write_char(' ');
 44e:	80 e2       	ldi	r24, 0x20	; 32
 450:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_char>
		LCD_write_char(' ');
 454:	80 e2       	ldi	r24, 0x20	; 32
 456:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_write_char>
		
		
		if (set_flag == 1) {
 45a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	59 f5       	brne	.+86     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
			KEY1 = KEYPAD_get_key()-48;
 462:	0e 94 ca 00 	call	0x194	; 0x194 <KEYPAD_get_key>
 466:	80 53       	subi	r24, 0x30	; 48
			eeprom_write(HOURS_ADD,(KEY1));
 468:	c8 2f       	mov	r28, r24
 46a:	d0 e0       	ldi	r29, 0x00	; 0
 46c:	be 01       	movw	r22, r28
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
			seven_seg_write_hours(eeprom_read(HOURS_ADD));
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 47a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <seven_seg_write_hours>
			
			KEY2 = KEYPAD_get_key()-48;
 47e:	0e 94 ca 00 	call	0x194	; 0x194 <KEYPAD_get_key>
			eeprom_write(HOURS_ADD,((KEY1*10)+KEY2));
 482:	be 01       	movw	r22, r28
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	cc 0f       	add	r28, r28
 48a:	dd 1f       	adc	r29, r29
 48c:	cc 0f       	add	r28, r28
 48e:	dd 1f       	adc	r29, r29
 490:	cc 0f       	add	r28, r28
 492:	dd 1f       	adc	r29, r29
 494:	6c 0f       	add	r22, r28
 496:	7d 1f       	adc	r23, r29
 498:	80 53       	subi	r24, 0x30	; 48
 49a:	68 0f       	add	r22, r24
 49c:	71 1d       	adc	r23, r1
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
			seven_seg_write_hours(eeprom_read(HOURS_ADD));
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 4aa:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <seven_seg_write_hours>
			
			set_flag ++;
 4ae:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		}
			
		if (set_flag == 2) {
 4b8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	09 f0       	breq	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c0:	a5 cf       	rjmp	.-182    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			KEY1 = KEYPAD_get_key()-48;
 4c2:	0e 94 ca 00 	call	0x194	; 0x194 <KEYPAD_get_key>
 4c6:	80 53       	subi	r24, 0x30	; 48
			eeprom_write(MINS_ADD,(KEY1));
 4c8:	c8 2f       	mov	r28, r24
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
 4cc:	be 01       	movw	r22, r28
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
			seven_seg_write_minuits(eeprom_read(MINS_ADD));
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 4da:	0e 94 37 03 	call	0x66e	; 0x66e <seven_seg_write_minuits>
			
			KEY2 = KEYPAD_get_key()-48;
 4de:	0e 94 ca 00 	call	0x194	; 0x194 <KEYPAD_get_key>
			eeprom_write(MINS_ADD,((KEY1*10)+KEY2));
 4e2:	be 01       	movw	r22, r28
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	cc 0f       	add	r28, r28
 4ea:	dd 1f       	adc	r29, r29
 4ec:	cc 0f       	add	r28, r28
 4ee:	dd 1f       	adc	r29, r29
 4f0:	cc 0f       	add	r28, r28
 4f2:	dd 1f       	adc	r29, r29
 4f4:	6c 0f       	add	r22, r28
 4f6:	7d 1f       	adc	r23, r29
 4f8:	80 53       	subi	r24, 0x30	; 48
 4fa:	68 0f       	add	r22, r24
 4fc:	71 1d       	adc	r23, r1
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
			seven_seg_write_minuits(eeprom_read(MINS_ADD));
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 50a:	0e 94 37 03 	call	0x66e	; 0x66e <seven_seg_write_minuits>
			
			set_flag = 0;
 50e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 512:	7c cf       	rjmp	.-264    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

00000514 <__vector_10>:
	
}

// 16Mhz, CC = 64/16 = 4 usec, Tov = 250*4 usec = 1 msec

ISR(TIMER0_COMP_vect) {
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	4f 93       	push	r20
 524:	5f 93       	push	r21
 526:	6f 93       	push	r22
 528:	7f 93       	push	r23
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
 52e:	af 93       	push	r26
 530:	bf 93       	push	r27
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
	timer0_value_ms ++;
 536:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <timer0_value_ms>
 53a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <timer0_value_ms+0x1>
 53e:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <timer0_value_ms+0x2>
 542:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <timer0_value_ms+0x3>
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	a1 1d       	adc	r26, r1
 54a:	b1 1d       	adc	r27, r1
 54c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <timer0_value_ms>
 550:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <timer0_value_ms+0x1>
 554:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <timer0_value_ms+0x2>
 558:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <timer0_value_ms+0x3>
	
	if (timer0_value_ms == 1000) {
 55c:	88 3e       	cpi	r24, 0xE8	; 232
 55e:	93 40       	sbci	r25, 0x03	; 3
 560:	a1 05       	cpc	r26, r1
 562:	b1 05       	cpc	r27, r1
 564:	89 f4       	brne	.+34     	; 0x588 <__vector_10+0x74>
		eeprom_write(SECS_ADD,(eeprom_read(SECS_ADD)+1));
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 56c:	bc 01       	movw	r22, r24
 56e:	6f 5f       	subi	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
		timer0_value_ms = 0;
 578:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <timer0_value_ms>
 57c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <timer0_value_ms+0x1>
 580:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <timer0_value_ms+0x2>
 584:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <timer0_value_ms+0x3>
	}
	
	if (eeprom_read(SECS_ADD) == 60) {
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 58e:	cc 97       	sbiw	r24, 0x3c	; 60
 590:	71 f4       	brne	.+28     	; 0x5ae <__vector_10+0x9a>
		eeprom_write(SECS_ADD,0);
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
		eeprom_write(MINS_ADD,(eeprom_read(MINS_ADD)+1));
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 5a2:	bc 01       	movw	r22, r24
 5a4:	6f 5f       	subi	r22, 0xFF	; 255
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
	}
	
	if (eeprom_read(MINS_ADD) == 60) {
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 5b4:	cc 97       	sbiw	r24, 0x3c	; 60
 5b6:	71 f4       	brne	.+28     	; 0x5d4 <__vector_10+0xc0>
		eeprom_write(MINS_ADD,0);
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
		eeprom_write(HOURS_ADD,(eeprom_read(HOURS_ADD)+1));
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 5c8:	bc 01       	movw	r22, r24
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
	}
	
	if (eeprom_read(HOURS_ADD) == 24) {
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 5da:	48 97       	sbiw	r24, 0x18	; 24
 5dc:	29 f4       	brne	.+10     	; 0x5e8 <__vector_10+0xd4>
		eeprom_write(HOURS_ADD,0);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	0e 94 49 00 	call	0x92	; 0x92 <eeprom_write>
	}
	
	seven_seg_write_seconds(eeprom_read(SECS_ADD));
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 5ee:	0e 94 99 03 	call	0x732	; 0x732 <seven_seg_write_seconds>
	if (set_flag != 1) {
 5f2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	49 f0       	breq	.+18     	; 0x60c <__vector_10+0xf8>
		seven_seg_write_minuits(eeprom_read(MINS_ADD));
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 600:	0e 94 37 03 	call	0x66e	; 0x66e <seven_seg_write_minuits>
	}
	if (set_flag != 2) {
 604:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	29 f0       	breq	.+10     	; 0x616 <__vector_10+0x102>
		seven_seg_write_hours(eeprom_read(HOURS_ADD));
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	0e 94 52 00 	call	0xa4	; 0xa4 <eeprom_read>
 612:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <seven_seg_write_hours>
	}
}
 616:	ff 91       	pop	r31
 618:	ef 91       	pop	r30
 61a:	bf 91       	pop	r27
 61c:	af 91       	pop	r26
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	7f 91       	pop	r23
 624:	6f 91       	pop	r22
 626:	5f 91       	pop	r21
 628:	4f 91       	pop	r20
 62a:	3f 91       	pop	r19
 62c:	2f 91       	pop	r18
 62e:	0f 90       	pop	r0
 630:	0f be       	out	0x3f, r0	; 63
 632:	0f 90       	pop	r0
 634:	1f 90       	pop	r1
 636:	18 95       	reti

00000638 <__vector_3>:

ISR(INT2_vect) {
 638:	1f 92       	push	r1
 63a:	0f 92       	push	r0
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	0f 92       	push	r0
 640:	11 24       	eor	r1, r1
 642:	8f 93       	push	r24
	set_flag = 1;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
}
 64a:	8f 91       	pop	r24
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <seven_seg_init>:
		SS_PORT &= 0b10000000;
		SS_PORT |= ss_data[num%10];
		_delay_ms(1);
	}
	
}
 656:	81 b3       	in	r24, 0x11	; 17
 658:	8f 67       	ori	r24, 0x7F	; 127
 65a:	81 bb       	out	0x11, r24	; 17
 65c:	8f e7       	ldi	r24, 0x7F	; 127
 65e:	82 bb       	out	0x12, r24	; 18
 660:	b9 9a       	sbi	0x17, 1	; 23
 662:	bb 9a       	sbi	0x17, 3	; 23
 664:	bc 9a       	sbi	0x17, 4	; 23
 666:	bd 9a       	sbi	0x17, 5	; 23
 668:	be 9a       	sbi	0x17, 6	; 23
 66a:	bf 9a       	sbi	0x17, 7	; 23
 66c:	08 95       	ret

0000066e <seven_seg_write_minuits>:

void seven_seg_write_minuits(uint8_t num) {
	EN1_DIS();
 66e:	c1 9a       	sbi	0x18, 1	; 24
	EN2_DIS();
 670:	c3 9a       	sbi	0x18, 3	; 24
	EN3_DIS();
 672:	c4 9a       	sbi	0x18, 4	; 24
	EN4_DIS();
 674:	c5 9a       	sbi	0x18, 5	; 24
	EN5_DIS();
 676:	c6 9a       	sbi	0x18, 6	; 24
	EN6_DIS();
 678:	c7 9a       	sbi	0x18, 7	; 24
	
	if ((num >= 0) && (num <= 9)) {
 67a:	8a 30       	cpi	r24, 0x0A	; 10
 67c:	18 f5       	brcc	.+70     	; 0x6c4 <seven_seg_write_minuits+0x56>
		EN4_EN();
 67e:	c5 98       	cbi	0x18, 5	; 24
		SS_PORT &= 0b10000000;
 680:	92 b3       	in	r25, 0x12	; 18
 682:	90 78       	andi	r25, 0x80	; 128
 684:	92 bb       	out	0x12, r25	; 18
		SS_PORT |= ss_data[num];
 686:	92 b3       	in	r25, 0x12	; 18
 688:	e8 2f       	mov	r30, r24
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	e0 5a       	subi	r30, 0xA0	; 160
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	80 81       	ld	r24, Z
 692:	89 2b       	or	r24, r25
 694:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 696:	8f e8       	ldi	r24, 0x8F	; 143
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <seven_seg_write_minuits+0x2c>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <seven_seg_write_minuits+0x32>
 6a0:	00 00       	nop
		_delay_us(100);
		
		EN4_DIS();
 6a2:	c5 9a       	sbi	0x18, 5	; 24
		EN3_EN();
 6a4:	c4 98       	cbi	0x18, 4	; 24
		SS_PORT &= 0b10000000;
 6a6:	82 b3       	in	r24, 0x12	; 18
 6a8:	80 78       	andi	r24, 0x80	; 128
 6aa:	82 bb       	out	0x12, r24	; 18
		SS_PORT |= ss_data[0];
 6ac:	92 b3       	in	r25, 0x12	; 18
 6ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6b2:	89 2b       	or	r24, r25
 6b4:	82 bb       	out	0x12, r24	; 18
 6b6:	ef e8       	ldi	r30, 0x8F	; 143
 6b8:	f1 e0       	ldi	r31, 0x01	; 1
 6ba:	31 97       	sbiw	r30, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <seven_seg_write_minuits+0x4c>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <seven_seg_write_minuits+0x52>
 6c0:	00 00       	nop
 6c2:	08 95       	ret
		_delay_us(100);
		
	} else if ((num >= 10) && (num <= 99)) {
 6c4:	96 ef       	ldi	r25, 0xF6	; 246
 6c6:	98 0f       	add	r25, r24
 6c8:	9a 35       	cpi	r25, 0x5A	; 90
 6ca:	90 f5       	brcc	.+100    	; 0x730 <seven_seg_write_minuits+0xc2>
		EN3_EN();
 6cc:	c4 98       	cbi	0x18, 4	; 24
		SS_PORT &= 0b10000000;
 6ce:	92 b3       	in	r25, 0x12	; 18
 6d0:	90 78       	andi	r25, 0x80	; 128
 6d2:	92 bb       	out	0x12, r25	; 18
		SS_PORT |= ss_data[num/10];
 6d4:	32 b3       	in	r19, 0x12	; 18
 6d6:	9d ec       	ldi	r25, 0xCD	; 205
 6d8:	89 9f       	mul	r24, r25
 6da:	91 2d       	mov	r25, r1
 6dc:	11 24       	eor	r1, r1
 6de:	96 95       	lsr	r25
 6e0:	96 95       	lsr	r25
 6e2:	96 95       	lsr	r25
 6e4:	e9 2f       	mov	r30, r25
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	e0 5a       	subi	r30, 0xA0	; 160
 6ea:	ff 4f       	sbci	r31, 0xFF	; 255
 6ec:	20 81       	ld	r18, Z
 6ee:	23 2b       	or	r18, r19
 6f0:	22 bb       	out	0x12, r18	; 18
 6f2:	ef e8       	ldi	r30, 0x8F	; 143
 6f4:	f1 e0       	ldi	r31, 0x01	; 1
 6f6:	31 97       	sbiw	r30, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <seven_seg_write_minuits+0x88>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <seven_seg_write_minuits+0x8e>
 6fc:	00 00       	nop
		_delay_us(100);
		
		EN3_DIS();
 6fe:	c4 9a       	sbi	0x18, 4	; 24
		EN4_EN();
 700:	c5 98       	cbi	0x18, 5	; 24
		SS_PORT &= 0b10000000;
 702:	22 b3       	in	r18, 0x12	; 18
 704:	20 78       	andi	r18, 0x80	; 128
 706:	22 bb       	out	0x12, r18	; 18
		SS_PORT |= ss_data[num%10];
 708:	32 b3       	in	r19, 0x12	; 18
 70a:	99 0f       	add	r25, r25
 70c:	29 2f       	mov	r18, r25
 70e:	22 0f       	add	r18, r18
 710:	22 0f       	add	r18, r18
 712:	92 0f       	add	r25, r18
 714:	e8 2f       	mov	r30, r24
 716:	e9 1b       	sub	r30, r25
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	e0 5a       	subi	r30, 0xA0	; 160
 71c:	ff 4f       	sbci	r31, 0xFF	; 255
 71e:	80 81       	ld	r24, Z
 720:	83 2b       	or	r24, r19
 722:	82 bb       	out	0x12, r24	; 18
 724:	8f e8       	ldi	r24, 0x8F	; 143
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <seven_seg_write_minuits+0xba>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <seven_seg_write_minuits+0xc0>
 72e:	00 00       	nop
 730:	08 95       	ret

00000732 <seven_seg_write_seconds>:
		
	}
}

void seven_seg_write_seconds(uint8_t num) {
	EN1_DIS();
 732:	c1 9a       	sbi	0x18, 1	; 24
	EN2_DIS();
 734:	c3 9a       	sbi	0x18, 3	; 24
	EN3_DIS();
 736:	c4 9a       	sbi	0x18, 4	; 24
	EN4_DIS();
 738:	c5 9a       	sbi	0x18, 5	; 24
	EN5_DIS();
 73a:	c6 9a       	sbi	0x18, 6	; 24
	EN6_DIS();
 73c:	c7 9a       	sbi	0x18, 7	; 24
	
	if ((num >= 0) && (num <= 9)) {
 73e:	8a 30       	cpi	r24, 0x0A	; 10
 740:	18 f5       	brcc	.+70     	; 0x788 <seven_seg_write_seconds+0x56>
		EN2_EN();
 742:	c3 98       	cbi	0x18, 3	; 24
		SS_PORT &= 0b10000000;
 744:	92 b3       	in	r25, 0x12	; 18
 746:	90 78       	andi	r25, 0x80	; 128
 748:	92 bb       	out	0x12, r25	; 18
		SS_PORT |= ss_data[num];
 74a:	92 b3       	in	r25, 0x12	; 18
 74c:	e8 2f       	mov	r30, r24
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	e0 5a       	subi	r30, 0xA0	; 160
 752:	ff 4f       	sbci	r31, 0xFF	; 255
 754:	80 81       	ld	r24, Z
 756:	89 2b       	or	r24, r25
 758:	82 bb       	out	0x12, r24	; 18
 75a:	8f e8       	ldi	r24, 0x8F	; 143
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	01 97       	sbiw	r24, 0x01	; 1
 760:	f1 f7       	brne	.-4      	; 0x75e <seven_seg_write_seconds+0x2c>
 762:	00 c0       	rjmp	.+0      	; 0x764 <seven_seg_write_seconds+0x32>
 764:	00 00       	nop
		_delay_us(100);
		
		EN2_DIS();
 766:	c3 9a       	sbi	0x18, 3	; 24
		EN1_EN();
 768:	c1 98       	cbi	0x18, 1	; 24
		SS_PORT &= 0b10000000;
 76a:	82 b3       	in	r24, 0x12	; 18
 76c:	80 78       	andi	r24, 0x80	; 128
 76e:	82 bb       	out	0x12, r24	; 18
		SS_PORT |= ss_data[0];
 770:	92 b3       	in	r25, 0x12	; 18
 772:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 776:	89 2b       	or	r24, r25
 778:	82 bb       	out	0x12, r24	; 18
 77a:	ef e8       	ldi	r30, 0x8F	; 143
 77c:	f1 e0       	ldi	r31, 0x01	; 1
 77e:	31 97       	sbiw	r30, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <seven_seg_write_seconds+0x4c>
 782:	00 c0       	rjmp	.+0      	; 0x784 <seven_seg_write_seconds+0x52>
 784:	00 00       	nop
 786:	08 95       	ret
		_delay_us(100);
		
	} else if ((num >= 10) && (num <= 99)) {
 788:	96 ef       	ldi	r25, 0xF6	; 246
 78a:	98 0f       	add	r25, r24
 78c:	9a 35       	cpi	r25, 0x5A	; 90
 78e:	90 f5       	brcc	.+100    	; 0x7f4 <seven_seg_write_seconds+0xc2>
		EN1_EN();
 790:	c1 98       	cbi	0x18, 1	; 24
		SS_PORT &= 0b10000000;
 792:	92 b3       	in	r25, 0x12	; 18
 794:	90 78       	andi	r25, 0x80	; 128
 796:	92 bb       	out	0x12, r25	; 18
		SS_PORT |= ss_data[num/10];
 798:	32 b3       	in	r19, 0x12	; 18
 79a:	9d ec       	ldi	r25, 0xCD	; 205
 79c:	89 9f       	mul	r24, r25
 79e:	91 2d       	mov	r25, r1
 7a0:	11 24       	eor	r1, r1
 7a2:	96 95       	lsr	r25
 7a4:	96 95       	lsr	r25
 7a6:	96 95       	lsr	r25
 7a8:	e9 2f       	mov	r30, r25
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	e0 5a       	subi	r30, 0xA0	; 160
 7ae:	ff 4f       	sbci	r31, 0xFF	; 255
 7b0:	20 81       	ld	r18, Z
 7b2:	23 2b       	or	r18, r19
 7b4:	22 bb       	out	0x12, r18	; 18
 7b6:	ef e8       	ldi	r30, 0x8F	; 143
 7b8:	f1 e0       	ldi	r31, 0x01	; 1
 7ba:	31 97       	sbiw	r30, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <seven_seg_write_seconds+0x88>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <seven_seg_write_seconds+0x8e>
 7c0:	00 00       	nop
		_delay_us(100);
		
		EN1_DIS();
 7c2:	c1 9a       	sbi	0x18, 1	; 24
		EN2_EN();
 7c4:	c3 98       	cbi	0x18, 3	; 24
		SS_PORT &= 0b10000000;
 7c6:	22 b3       	in	r18, 0x12	; 18
 7c8:	20 78       	andi	r18, 0x80	; 128
 7ca:	22 bb       	out	0x12, r18	; 18
		SS_PORT |= ss_data[num%10];
 7cc:	32 b3       	in	r19, 0x12	; 18
 7ce:	99 0f       	add	r25, r25
 7d0:	29 2f       	mov	r18, r25
 7d2:	22 0f       	add	r18, r18
 7d4:	22 0f       	add	r18, r18
 7d6:	92 0f       	add	r25, r18
 7d8:	e8 2f       	mov	r30, r24
 7da:	e9 1b       	sub	r30, r25
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	e0 5a       	subi	r30, 0xA0	; 160
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	80 81       	ld	r24, Z
 7e4:	83 2b       	or	r24, r19
 7e6:	82 bb       	out	0x12, r24	; 18
 7e8:	8f e8       	ldi	r24, 0x8F	; 143
 7ea:	91 e0       	ldi	r25, 0x01	; 1
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <seven_seg_write_seconds+0xba>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <seven_seg_write_seconds+0xc0>
 7f2:	00 00       	nop
 7f4:	08 95       	ret

000007f6 <seven_seg_write_hours>:
		
	}
}

void seven_seg_write_hours(uint8_t num) {
	EN1_DIS();
 7f6:	c1 9a       	sbi	0x18, 1	; 24
	EN2_DIS();
 7f8:	c3 9a       	sbi	0x18, 3	; 24
	EN3_DIS();
 7fa:	c4 9a       	sbi	0x18, 4	; 24
	EN4_DIS();
 7fc:	c5 9a       	sbi	0x18, 5	; 24
	EN5_DIS();
 7fe:	c6 9a       	sbi	0x18, 6	; 24
	EN6_DIS();
 800:	c7 9a       	sbi	0x18, 7	; 24
	
	if ((num >= 0) && (num <= 9)) {
 802:	8a 30       	cpi	r24, 0x0A	; 10
 804:	18 f5       	brcc	.+70     	; 0x84c <seven_seg_write_hours+0x56>
		EN6_EN();
 806:	c7 98       	cbi	0x18, 7	; 24
		SS_PORT &= 0b10000000;
 808:	92 b3       	in	r25, 0x12	; 18
 80a:	90 78       	andi	r25, 0x80	; 128
 80c:	92 bb       	out	0x12, r25	; 18
		SS_PORT |= ss_data[num];
 80e:	92 b3       	in	r25, 0x12	; 18
 810:	e8 2f       	mov	r30, r24
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	e0 5a       	subi	r30, 0xA0	; 160
 816:	ff 4f       	sbci	r31, 0xFF	; 255
 818:	80 81       	ld	r24, Z
 81a:	89 2b       	or	r24, r25
 81c:	82 bb       	out	0x12, r24	; 18
 81e:	8f e8       	ldi	r24, 0x8F	; 143
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	f1 f7       	brne	.-4      	; 0x822 <seven_seg_write_hours+0x2c>
 826:	00 c0       	rjmp	.+0      	; 0x828 <seven_seg_write_hours+0x32>
 828:	00 00       	nop
		_delay_us(100);
		
		EN6_DIS();
 82a:	c7 9a       	sbi	0x18, 7	; 24
		EN5_EN();
 82c:	c6 98       	cbi	0x18, 6	; 24
		SS_PORT &= 0b10000000;
 82e:	82 b3       	in	r24, 0x12	; 18
 830:	80 78       	andi	r24, 0x80	; 128
 832:	82 bb       	out	0x12, r24	; 18
		SS_PORT |= ss_data[0];
 834:	92 b3       	in	r25, 0x12	; 18
 836:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 83a:	89 2b       	or	r24, r25
 83c:	82 bb       	out	0x12, r24	; 18
 83e:	ef e8       	ldi	r30, 0x8F	; 143
 840:	f1 e0       	ldi	r31, 0x01	; 1
 842:	31 97       	sbiw	r30, 0x01	; 1
 844:	f1 f7       	brne	.-4      	; 0x842 <seven_seg_write_hours+0x4c>
 846:	00 c0       	rjmp	.+0      	; 0x848 <seven_seg_write_hours+0x52>
 848:	00 00       	nop
 84a:	08 95       	ret
		_delay_us(100);
		
		} else if ((num >= 10) && (num <= 99)) {
 84c:	96 ef       	ldi	r25, 0xF6	; 246
 84e:	98 0f       	add	r25, r24
 850:	9a 35       	cpi	r25, 0x5A	; 90
 852:	90 f5       	brcc	.+100    	; 0x8b8 <__stack+0x59>
		EN5_EN();
 854:	c6 98       	cbi	0x18, 6	; 24
		SS_PORT &= 0b10000000;
 856:	92 b3       	in	r25, 0x12	; 18
 858:	90 78       	andi	r25, 0x80	; 128
 85a:	92 bb       	out	0x12, r25	; 18
		SS_PORT |= ss_data[num/10];
 85c:	32 b3       	in	r19, 0x12	; 18
 85e:	9d ec       	ldi	r25, 0xCD	; 205
 860:	89 9f       	mul	r24, r25
 862:	91 2d       	mov	r25, r1
 864:	11 24       	eor	r1, r1
 866:	96 95       	lsr	r25
 868:	96 95       	lsr	r25
 86a:	96 95       	lsr	r25
 86c:	e9 2f       	mov	r30, r25
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	e0 5a       	subi	r30, 0xA0	; 160
 872:	ff 4f       	sbci	r31, 0xFF	; 255
 874:	20 81       	ld	r18, Z
 876:	23 2b       	or	r18, r19
 878:	22 bb       	out	0x12, r18	; 18
 87a:	ef e8       	ldi	r30, 0x8F	; 143
 87c:	f1 e0       	ldi	r31, 0x01	; 1
 87e:	31 97       	sbiw	r30, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <__stack+0x1f>
 882:	00 c0       	rjmp	.+0      	; 0x884 <__stack+0x25>
 884:	00 00       	nop
		_delay_us(100);
		
		EN5_DIS();
 886:	c6 9a       	sbi	0x18, 6	; 24
		EN6_EN();
 888:	c7 98       	cbi	0x18, 7	; 24
		SS_PORT &= 0b10000000;
 88a:	22 b3       	in	r18, 0x12	; 18
 88c:	20 78       	andi	r18, 0x80	; 128
 88e:	22 bb       	out	0x12, r18	; 18
		SS_PORT |= ss_data[num%10];
 890:	32 b3       	in	r19, 0x12	; 18
 892:	99 0f       	add	r25, r25
 894:	29 2f       	mov	r18, r25
 896:	22 0f       	add	r18, r18
 898:	22 0f       	add	r18, r18
 89a:	92 0f       	add	r25, r18
 89c:	e8 2f       	mov	r30, r24
 89e:	e9 1b       	sub	r30, r25
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	e0 5a       	subi	r30, 0xA0	; 160
 8a4:	ff 4f       	sbci	r31, 0xFF	; 255
 8a6:	80 81       	ld	r24, Z
 8a8:	83 2b       	or	r24, r19
 8aa:	82 bb       	out	0x12, r24	; 18
 8ac:	8f e8       	ldi	r24, 0x8F	; 143
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	01 97       	sbiw	r24, 0x01	; 1
 8b2:	f1 f7       	brne	.-4      	; 0x8b0 <__stack+0x51>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <__stack+0x57>
 8b6:	00 00       	nop
 8b8:	08 95       	ret

000008ba <timer0_CTC_init>:
	SETBIT(TIMSK,TOIE0);									 // enable overflow interrupt for normal mode
	SETBIT(SREG,7);											 // enable global interrupt
}

void timer0_CTC_init(uint8_t max) {
	TCCR0 |= (1<<FOC0) | (1<<WGM01) | (1<<CS00) | (1<<CS01); // 64 prescaler, CTC mode
 8ba:	93 b7       	in	r25, 0x33	; 51
 8bc:	9b 68       	ori	r25, 0x8B	; 139
 8be:	93 bf       	out	0x33, r25	; 51
	OCR0   = max;										   	 // set compare value
 8c0:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1<<OCIE0);									 // enable compare match interrupt for ctc mode
 8c2:	89 b7       	in	r24, 0x39	; 57
 8c4:	82 60       	ori	r24, 0x02	; 2
 8c6:	89 bf       	out	0x39, r24	; 57
	SETBIT(SREG,7);											 // enable global interrupt
 8c8:	8f b7       	in	r24, 0x3f	; 63
 8ca:	80 68       	ori	r24, 0x80	; 128
 8cc:	8f bf       	out	0x3f, r24	; 63
 8ce:	08 95       	ret

000008d0 <__udivmodsi4>:
 8d0:	a1 e2       	ldi	r26, 0x21	; 33
 8d2:	1a 2e       	mov	r1, r26
 8d4:	aa 1b       	sub	r26, r26
 8d6:	bb 1b       	sub	r27, r27
 8d8:	fd 01       	movw	r30, r26
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <__udivmodsi4_ep>

000008dc <__udivmodsi4_loop>:
 8dc:	aa 1f       	adc	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	ee 1f       	adc	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	a2 17       	cp	r26, r18
 8e6:	b3 07       	cpc	r27, r19
 8e8:	e4 07       	cpc	r30, r20
 8ea:	f5 07       	cpc	r31, r21
 8ec:	20 f0       	brcs	.+8      	; 0x8f6 <__udivmodsi4_ep>
 8ee:	a2 1b       	sub	r26, r18
 8f0:	b3 0b       	sbc	r27, r19
 8f2:	e4 0b       	sbc	r30, r20
 8f4:	f5 0b       	sbc	r31, r21

000008f6 <__udivmodsi4_ep>:
 8f6:	66 1f       	adc	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	1a 94       	dec	r1
 900:	69 f7       	brne	.-38     	; 0x8dc <__udivmodsi4_loop>
 902:	60 95       	com	r22
 904:	70 95       	com	r23
 906:	80 95       	com	r24
 908:	90 95       	com	r25
 90a:	9b 01       	movw	r18, r22
 90c:	ac 01       	movw	r20, r24
 90e:	bd 01       	movw	r22, r26
 910:	cf 01       	movw	r24, r30
 912:	08 95       	ret

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
